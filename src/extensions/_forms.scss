/* Kingdom CSS Extension - Forms */
@import "../modules/colors";

// Set caution background and text color if not already defined in $colors map
@if not map-has-key($colors, caution) {
  $colors: map-merge($colors, (caution: complementary-contrasted-color(get-color(primary), red)));
}

@if length(map-get($colors, caution)) < 2 {
  $colors: map-merge($colors, (caution: background-text-color-pair(map-get($colors, caution))));
}

// Set disabled background and text color if not already defined in $colors map
@if not map-has-key($colors, disabled) {
  $colors: map-merge($colors, (disabled: change_color(get-color(body), $saturation: 1%, $lightness: 90%, $alpha: .75) change_color(get-color(body), $saturation: 1%, $lightness: 50%)));
}

$input-border-color: change_color(get-color(body), $saturation: 5%, $lightness: 75%) !default;
$input-border-width: 1px !default;
$input-border-radius: $spacing-base/8 !default;
$input-border-style: solid !default;
$input-background: white !default;
$input-background-clip: padding-box !default;
$input-box-shadow: inset 0 2px 4px 0 rgba(black, .08) !default;

$button-color: get-color(primary) !default;
$button-text-color: get-color(primary, true) !default;
$button-border-color: $button-color !default;
$button-border-width: $input-border-width !default;
$button-border-radius: $input-border-radius !default;
$button-border-style: $input-border-style !default;
$button-background: transparent !default;
$button-background-clip: padding-box !default;
$button-box-shadow: 0 2px 4px 0 rgba(black, .08) !default;
$button-active-box-shadow: inset 0 2px 4px 0 rgba(black, .08) !default;
$button-focus-box-shadow: 0 0 0 .2rem change_color($button-color, $lightness: 80%) !default;
$button-focus-outline: none !default;
$button-transition: all .15s ease-in-out !default;
$button-horizontal-padding: $spacing-base/4 !default;
$button-text-decoration: none !default;

$button-destructive-color: get-color(caution) !default;
$button-destructive-text-color: get-color(caution, true) !default;
$button-destructive-focus-box-shadow: set_nth($button-focus-box-shadow, -1, change_color($button-destructive-color, $lightness: 80%)) !default;

/* %label-disabled */
%label-disabled {
  color: get-color(disabled, true);
}

/* %label-invalid */
%label-invalid {
  @include set-color(caution);
}

/* Inputs */

input, select:not([size]):not([multiple]) {
  @include set-border-preserving-line-height($spacing-base, $input-border-width);
}

textarea {
  @include set-border-for-auto-height($width: $input-border-width);
}

input, textarea, select {
  background: $input-background;
  background-clip: $input-background-clip;

  border-color: $input-border-color;
  border-style: $input-border-style;
  border-radius: $input-border-radius;

  &:invalid, &[aria-invalid] {
    border-color: get-color(caution);
  }

  &:disabled {
    background-color: get-color(disabled);
  }
}

input, textarea {
  box-shadow: $input-box-shadow;
  &::placeholder {
    color: inherit;
    opacity: .5;
  }

  &:read-only {
    background-color: get-color(disabled);
  }
}

[type='checkbox'], [type='radio'] {
  vertical-align: baseline;
  height: auto;

  &[id] {
    &:disabled {
      + label[for] {
        @extend %label-disabled;
      }
    }

    &:invalid, &[aria-invalid] {
      + label[for] {
        @extend %label-invalid;
      }
    }
  }
}

// Labels for disabled form controls
label.disabled,
label[disabled],
label:disabled,
fieldset:disabled label:not([for]) {
  @extend %label-disabled;
}

// Labels for invalid form controls
label.invalid,
label:invalid,
label[aria-invalid] {
  @extend %label-invalid;
}

/* Buttons */

/* %button base for all buttons  */
%button {
  color: $button-color;
  background: $button-background;
  background-clip: $button-background-clip;

  display: inline-block;

  @include set-border-preserving-line-height($spacing-base, $button-border-width);
  border-color: $button-border-color;
  border-style: $button-border-style;
  border-radius: $button-border-radius;

  box-shadow: $button-box-shadow;

  padding-left: $button-horizontal-padding;
  padding-right: $button-horizontal-padding;

  text-decoration: $button-text-decoration;

  transition: $button-transition;

  &:focus {
    outline: $button-focus-outline;
    box-shadow: $button-focus-box-shadow;
  }

  &:active {
    color: $button-color; //Avoid clicked button "disappearing" when browser inverts text color on a transparent background
    box-shadow: $input-box-shadow;
  }

  &:not(:disabled):not(.disabled) {
    cursor: pointer;
  }

  &:disabled, &.disabled, fieldset:disabled & {
    pointer-events: none;

    @include set-background-color(disabled);
    border-color: get-color(disabled);
  }
}

button,
[type='button'],
[type='reset'],
[type='submit'] {
  @extend %button;
}

/* Prominent button */
.button-prime {
  @extend %button;
  background: $button-color;
  border-color: $button-color;
  color: $button-text-color;

  &:active {
    color: $button-text-color;
  }
}

/* Standard button */
.button-plain {
  @extend %button;
}

/* Discreet, link like button */
.button-petty {
  @extend %button;
  border: transparent;
  background: transparent;
  text-decoration: underline;
  box-shadow: none;

  &:focus {
    text-decoration: none;
  }

  &:active {
    box-shadow: none;
    text-decoration: none;
  }

  &:disabled {
    text-decoration: none;
  }
}

/* Big button */
.button-large {
  @extend %button;
  @include set-text(1em, 2*$spacing-base);
  @include set-border-preserving-line-height($spacing-base * 2, $button-border-width);
}

/* Cautionary button */
.button-destructive {
  @extend %button;
  color: $button-destructive-color;
  border-color: $button-destructive-color;

  &:active {
    color: $button-destructive-color;
  }

  &:focus {
    box-shadow: $button-destructive-focus-box-shadow;
  }

  &.button-prime {
    background: $button-destructive-color;
    border-color: $button-destructive-color;
    color: $button-destructive-text-color;

    &:active {
      color: $button-destructive-text-color;
    }
  }
}

/* Form layout */

label {
  // Labels go on their own line
  display: block;
}

* + label {
  // Add spacing before all labels
  @extend %mt-1;
}

fieldset > label:first-of-type {
  // Remove spacing before first label in a fieldset
  @extend %mt-0;
}

label:not([for]) {
  & + & {
    // Remove spacing between adjacent labels not referencing any input - i.e. presumed to contain their input, usually a checkbox or radiobutton
    @extend %mt-0;
  }
}

[type="checkbox"], [type="radio"] {
  &[id] {
    + label[for] {
      // Inline labels that come after their checkbox/radiobutton
      display: inline;
    }
  }
}

[aria-describedby] + {
  span, small {
    &[id] {
      // Turn descriptive inline elements that come after their input into blocks
      display: inline-block;
    }
  }

  div {
    &[id] {
      // Remove space before descriptive block elements that come after their input
      @extend %mt-0;
    }
  }
}

/* .form-inline make a form's contents go inline */
.form-inline {
  > * {
    display: inline-block;
    @extend %mt-1;
  }
}
