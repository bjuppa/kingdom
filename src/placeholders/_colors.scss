@import "../modules/colors";

@if not map-has-key($colors, body) {
  $colors: map-merge($colors, (body: white black));
}

@if not map-has-key($colors, primary) {
  $colors: map-merge($colors, (primary: blue));
}

@if not map-has-key($colors, caution) {
  //TODO: attempt to extract a red color matching the primary color, but with distance if the primary color is in the red spectrum
  $colors: map-merge($colors, (caution: red));
}

@if not map-has-key($colors, disabled) {
  $colors: map-merge($colors, (disabled: change_color(get-color(primary), $saturation: 5%, $lightness: 95%)));
}

@if not map-has-key($colors, border) {
  $colors: map-merge($colors, (border: currentColor));
}

@if length(map-get($colors, body)) < 2 {
  $colors: map-merge($colors, (primary: background-text-color-pair(map-get($colors, body), 100%)));
}

@if length(map-get($colors, primary)) < 2 {
  $colors: map-merge($colors, (primary: background-text-color-pair(map-get($colors, primary))));
}

@if length(map-get($colors, caution)) < 2 {
  $colors: map-merge($colors, (caution: background-text-color-pair(map-get($colors, caution))));
}

@if length(map-get($colors, disabled)) < 2 {
  $colors: map-merge($colors, (disabled: background-text-color-pair(map-get($colors, disabled), 50%)));
}

/* Placeholders for colors */

:root {
  @each $name, $color-pair in $colors {
    --color-#{$name}: get-color($name);
    @if(length($color-pair) > 1) {
      --color-#{$name}-text: get-color($name, true);
    }
  }
}

/* %body-color */
%color-body {
  @include set-background-color(body);
}
