$max-spacing-multiple: 32 !default;
$paragraph-spacing-factor: 1 !default;
$spacing-fractions: (
  '1\\/8': 1/8,
  '1\\/6': 1/6,
  '1\\/4': 1/4,
  '1\\/3': 1/3,
  '1\\/2': 1/2,
  '2\\/3': 2/3,
  '3\\/4': 3/4,
  '5\\/6': 5/6,
  '7\\/8': 7/8,
  '5\\/4': 5/4,
  '4\\/3': 4/3,
  '3\\/2': 3/2,
) !default;

/* Placeholders for spacing */
@import "../modules/data-generators";
@import "../modules/sizing";
@import "../modules/spacing";

:root {
  --spacing-base: #{$spacing-base};
  --paragraph-spacing-factor: #{$paragraph-spacing-factor};
}

/* %mt-paragraph */
%mt-paragraph {
  margin-top: calc(var(--paragraph-spacing-factor, #{$paragraph-spacing-factor}) * #{spacing-base-var()});
}

// Margin placeholders are ordered with all sides in combination first (only 0) (`m`), being overwritten by:
// 1. Vertical margin (only 0) (`my`)
// 2. Horizontal margin (`mx`)
// 3. Top margin (only multiples) (`mt`)
// 4. Bottom margin (only 0) (`mb`)
// 5. Left and right margins (`ml` and `mr`)

/* %m-0 */
%m-0 {
  margin: 0;
}

/* %my-0 */
%my-0 {
  margin-top: 0;
  margin-bottom: 0;
}

/* %mx-0 */
%mx-0 {
  margin-left: 0;
  margin-right: 0;
}

@each $suffix, $factor in map-merge-natural-numbers($spacing-fractions, $max-spacing-multiple) {
  /* %mx-#{$suffix} */
  %mx-#{$suffix} {
    @include length-relative(margin-left margin-right, $factor);
  }
}

/* %mt-0 */
%mt-0 {
  /* Reset vertical spacing */
  margin-top: 0;
}

@each $suffix, $factor in map-merge-natural-numbers((), $max-spacing-multiple) {
  /* %mt-#{$suffix} */
  %mt-#{$suffix} {
    @if $factor == 1 {
      /* Default vertical spacing */
    }
    @include length-relative(margin-top, $factor);
  }
}

/* %mb-0 */
%mb-0 {
  margin-bottom: 0;
}

/* %ml-0 */
%ml-0 {
  margin-left: 0;
}

/* %mr-0 */
%mr-0 {
  margin-right: 0;
}

@each $suffix, $factor in map-merge-natural-numbers($spacing-fractions, $max-spacing-multiple) {
  /* %ml-#{$suffix} */
  %ml-#{$suffix} {
    @include length-relative(margin-left, $factor);
  }

  /* %mr-#{$suffix} */
  %mr-#{$suffix} {
    @include length-relative(margin-right, $factor);
  }
}

// Padding placeholders are ordered with all sides in combination first (`p`), being overwritten by:
// 1. Vertical padding (`py`)
// 2. Horizontal padding (`px`)
// 3. Top and bottom paddings (`pt` and `pb`)
// 4. Asymmetric vertical padding, where top and bottom add up to a multiple

/* %p-0 */
%p-0 {
  padding: 0;
}

@each $suffix, $factor in map-merge-natural-numbers($spacing-fractions, $max-spacing-multiple) {
  @if (round($factor*2) == $factor*2) {
    /* %p-#{$suffix} */
    %p-#{$suffix} {
      @include length-relative(padding, $factor);
    }
  }
}

/* %py-0 */
%py-0 {
  @include padding-relative(top bottom, 0);
}

@each $suffix, $factor in map-merge-natural-numbers($spacing-fractions, $max-spacing-multiple) {
  @if (round($factor*2) == $factor*2) {
    /* %py-#{$suffix} */
    %py-#{$suffix} {
      @include padding-relative(top bottom, $factor);
    }
  }
}

/* %px-0 */
%px-0 {
  @include padding-relative(left right, 0);
}

@each $suffix, $factor in map-merge-natural-numbers($spacing-fractions, $max-spacing-multiple) {
  /* %px-#{$suffix} */
  %px-#{$suffix} {
    @include padding-relative(left right, $factor);
  }

  /* %pl-#{$suffix} */
  %pl-#{$suffix} {
    @include padding-relative(left, $factor);
  }

  /* %pr-#{$suffix} */
  %pr-#{$suffix} {
    @include padding-relative(right, $factor);
  }
}

/* %pt-0 */
%pt-0 {
  @include padding-relative(top, 0);
}

/* %pb-0 */
%pb-0 {
  @include padding-relative(bottom, 0);
}

@each $suffix, $factor in map-merge-natural-numbers((), $max-spacing-multiple) {
  /* %pt-#{$suffix} */
  %pt-#{$suffix} {
    @include padding-relative(top, $factor);
  }

  /* %pb-#{$suffix} */
  %pb-#{$suffix} {
    @include padding-relative(bottom, $factor);
  }
}

@each $suffix, $fraction in $spacing-fractions {
  /* %pt-#{$suffix} Compensates with padding-bottom */
  %pt-#{$suffix} {
    @include padding-relative(top, $fraction);
  }
  /* %pb-#{$suffix} Compensates with padding-top */
  %pb-#{$suffix} {
    @include padding-relative(bottom, $fraction);
  }
}

// Fractional vertical margin placeholders compensate with top and bottom padding and remove any set height
// Placed last to overwrite all other spacing/sizing properties
@each $suffix, $fraction in $spacing-fractions {
  /* %mt-#{$suffix} Compensates with vertical padding */
  %mt-#{$suffix} {
    @include margin-relative(top, $fraction);
    height: auto;
  }
}

%h-px {
  /* Fit 1px into vertical flow */
  margin-bottom: -1px;
  + * {
    @extend %mt-1;
  }
}

%height-multiple {
  //A fixed-height element should not compensate margin for next element
  margin-bottom: 0;
}
