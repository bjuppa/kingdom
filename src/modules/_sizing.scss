$spacing-base: 1.5rem !default;
$readable-line-length-min: 45ch !default;
$readable-line-length-max: 75ch !default;
//https://www.smashingmagazine.com/2014/09/balancing-line-length-font-size-responsive-web-design/#line-length-measure-and-reading

@function spacing-base-var() {
  @return var(--spacing-base, $spacing-base);
}

// Apply one or more length-properties relative to the spacing base
@mixin length-relative($properties, $factor: 1, $extend-height-multiple: false) {
  @each $property in $properties {
    @if($factor != 0) {
      #{$property}: calc(#{$factor} * #{spacing-base-var()});
    } @else {
      #{$property}: 0;
    }
    @if ($extend-height-multiple and $property == height and round($factor) == $factor) {
      @extend %height-multiple !optional;
    }
  }
}

// Apply font size and line height, and put the line-height in a CSS custom property for use in other calculations
@mixin size-text($font-size, $line-height) {
  font-size: $font-size;
  @if (type-of($line-height) == 'number' and $line-height != 0) {
    @if (unit($line-height) == unit($spacing-base)) {
      $factor: round($line-height/$spacing-base);
      --line-height: calc(#{$factor} * #{spacing-base-var()});
    } @else {
      --line-height: #{$line-height};
    }
    line-height: var(--line-height, #{$line-height});
  } @else {
    line-height: $line-height;
  }
}

@mixin width-readable($max-width: 100%, $min-width: auto, $desired-width: $readable-line-length-max) {
  max-width: $max-width;
  width: $desired-width;
  min-width: $min-width;
}

@function minmax-readable($min-width: $readable-line-length-min, $max-width: $readable-line-length-max) {
  @return minmax($min-width, $max-width);
}

@function shadow-relative($factor: 1, $blur: 10/7, $x-fraction: 0, $y-fraction: 1, $spread: 0) {
  @if($spread > 1) {
    $spread: 1;
  }
  @if(($blur / 2 + $spread) > 1) {
    $blur: (1 - $spread) * 2;
  }

  $spread-factor: $factor * $spread;
  $blur-factor: $factor * $blur / 2 * .8; // This is slightly less than 1/2 because Firefox's shadow blur goes outside the specified radius
  $offset-factor: $factor * (1 - ($blur / 2 + $spread));

  $shadow: calc(#{$x-fraction * $offset-factor} * #{spacing-base-var()}) calc(#{$y-fraction * $offset-factor} * #{spacing-base-var()}) calc(#{$blur-factor} * #{spacing-base-var()});
  @if($spread != 0) {
    $shadow: append($shadow, calc(#{$spread-factor} * #{spacing-base-var()}));
  }

  @return $shadow;
}
