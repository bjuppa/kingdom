$vertical-rhythm-base: 2rem !default;
$body-line-height-factor: 1.5 !default;
$min-line-height-factor: 1.2 !default;
$baseline-shift-factor-normal: 0.71 !default; // This shifts text down to the baseline, adjust it to your liking (it's relative em and differs for every font)

@import "converters";
@import "sizing";

$font-size-normal: $vertical-rhythm-base / $body-line-height-factor !default;

// Find the next vertical rhythm multiple fitting the required size
@function flow-lines($size-to-fit, $vertical-rhythm-base: $vertical-rhythm-base) {
  @return ceil(length-rem($size-to-fit) / length-rem($vertical-rhythm-base));
}

// Get a font-size comfortably covering a number of vertical rhythm lines
@function flow-font-size($lines: 1, $line-height-factor: $body-line-height-factor, $vertical-rhythm-base: $vertical-rhythm-base) {
  @return $lines*$vertical-rhythm-base/$line-height-factor;
}

// Get a line-height fitting a font-size into the vertical rhythm
@function flow-line-height($font-size: $font-size-normal, $min-line-height-factor: $min-line-height-factor, $vertical-rhythm-base: $vertical-rhythm-base) {
  @return ceil(font-size-rem($font-size)*$min-line-height-factor/length-rem($vertical-rhythm-base))*$vertical-rhythm-base;
}

// Apply a responsive increase in discrete steps
@mixin responsive-rhythm($start-multiple: 5, $end-multiple: 15, $from-viewport-width: 600px, $to-viewport-width: 1800px, $properties: height, $media: screen) {
  $breakpoint-step-size: round(($to-viewport-width - $from-viewport-width) / ($end-multiple - $start-multiple));

  @include length-relative($properties, $start-multiple, $extend-height-multiple: true);

  @for $i from $start-multiple + 1 through $end-multiple {
    @media #{$media} and (min-width: $from-viewport-width + ($i - $start-multiple) * $breakpoint-step-size) {
      @include length-relative($properties, $i);
    }
  }
}
