$colors: () !default;

// Get a color from the global $colors map
@function get-color($name, $get-text-color: false) {
  $list: map-get($colors, $name);
  @if $get-text-color and length($list) < 2 {
    @error "No text color exists for '#{$name}' in the global $colors map";
  }
  @return nth($list, if($get-text-color, 2, 1));
}

// Shift a color into the hue spectrum of another color
@function transform-hue($color, $base: blue) {
  @return change_color($color, $hue: hue($base) + (hue($color) + 15deg) % 30 - 15deg);
}

// Shift the hue of a color away from a reference color if they're close, while staying within the same base color
@function ensure-hue-contrast($color, $reference) {
  $unsigned-distance: 180deg - abs(abs(hue($reference) - hue($color)) - 180deg);
  @if $unsigned-distance < 15deg {
    $signed-distance-to-base: (hue($reference) - (round(hue($color) / 30) * 30) + 180deg) % 360 - 180deg;
    $color: change_color($color, $hue: hue($reference) + if($signed-distance-to-base > 0, -15deg, 15deg));
  }
  @return $color;
}

// Shift a color into the hue spectrum of another color and make sure their hues are not to close
@function transform-hue-with-contrast($color, $base: blue) {
  @return ensure-hue-contrast(transform-hue($color, $base), $color);
}

// Fit a color within legible lightness and saturation spans for display
@function normalize-color($color, $min-lightness: 40%, $max-lightness: 60%, $min-saturation: 60%) {
  @if (lightness($color) < $min-lightness) {
    $color: change_color($color, $lightness: $min-lightness);
  } @else if (lightness($color) > $max-lightness) {
    $color: change_color($color, $lightness: $max-lightness);
  }
  @if (saturation($color) < $min-saturation) {
    $color: change_color($color, $saturation: $min-saturation);
  }
  @return $color;
}

// Generate a text color suitable for a background
@function text-color-for-background($background-color) {
  @if $background-color == currentColor {
    @return null;
  }
  @if $background-color == inherit {
    @return currentColor;
  }
  @if $background-color == initial {
    @return currentColor;
  }
  @if $background-color == unset {
    @return currentColor;
  }
  @if $background-color == transparent {
    @return currentColor;
  }

  @if lightness($background-color) > 50% {
    @return scale_color($background-color, $lightness: -95%, $saturation: -50%);
  } @else {
    @return scale_color($background-color, $lightness: 90%, $saturation: -50%);
  }
}

// Append a suitable text color to a background color
@function background-text-color-pair($background-color) {
  $result: nth($background-color, 1);
  $text-color: text-color-for-background(nth($background-color, 1));
  @if($text-color) {
    $result: $result $text-color;
  }
  @return $result;
}

// Set a color property from the global map
@mixin apply-color($name: primary, $property: color, $apply-text-color: false) {
  #{$property}: get-color($name, $apply-text-color);
  $var_name: --color-#{$name};
  @if ($apply-text-color) {
    $var_name: $var_name + '-text';
  }
  #{$property}: var(#{$var-name}, get-color($name, $apply-text-color));
}

// Set a background color (and text color) from the global map
@mixin apply-background-color($name, $apply-text-color: true) {
  @include apply-color($name, background-color);
  @if ($apply-text-color) {
    @include apply-color($name, $apply-text-color: true);
  }
}

// Add a color (with corresponding text color) to the global $colors map unless already registered
// Use between importing this module and importing the Level
@mixin register-color($name, $color-values, $ensure-text-color: true) {
  @if not map-has-key($colors, $name) {
    $colors: map-merge($colors, ($name: $color-values)) !global;
  }
  @if $ensure-text-color and length(map-get($colors, $name)) < 2 {
    $colors: map-merge($colors, ($name: background-text-color-pair(map-get($colors, $name)))) !global;
  }
}
